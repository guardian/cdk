// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`The ErrorBudgetAlarmExperimental construct should accept math expressions for more complicated definitions of bad/valid events 1`] = `
{
  "Metadata": {
    "gu:cdk:constructs": [
      "GuStack",
      "GuErrorBudgetAlarmExperimental",
    ],
    "gu:cdk:version": "TEST",
  },
  "Resources": {
    "ChildAlarmLongPeriodMapiFrontsAvailabilityFastBurnCompositeAlarmF1A44641": {
      "Properties": {
        "AlarmName": "ChildAlarmLongPeriodMapiFrontsAvailabilityFastBurnCompositeAlarm",
        "ComparisonOperator": "GreaterThanThreshold",
        "EvaluationPeriods": 1,
        "Metrics": [
          {
            "Expression": "badEvents/validEvents",
            "Id": "expr_1",
            "Label": "Observed failure rate",
          },
          {
            "Expression": "loadBalancerErrors + targetErrors",
            "Id": "badEvents",
            "ReturnData": false,
          },
          {
            "Id": "loadBalancerErrors",
            "MetricStat": {
              "Metric": {
                "MetricName": "LbHttpErrors",
                "Namespace": "TestLoadBalancerMetrics",
              },
              "Period": 3600,
              "Stat": "Average",
            },
            "ReturnData": false,
          },
          {
            "Id": "targetErrors",
            "MetricStat": {
              "Metric": {
                "MetricName": "TargetHttpErrors",
                "Namespace": "TestTargetMetrics",
              },
              "Period": 3600,
              "Stat": "Average",
            },
            "ReturnData": false,
          },
          {
            "Expression": "allRequests - invalidRequests",
            "Id": "validEvents",
            "ReturnData": false,
          },
          {
            "Id": "allRequests",
            "MetricStat": {
              "Metric": {
                "MetricName": "HttpRequests",
                "Namespace": "TestLoadBalancerMetrics",
              },
              "Period": 3600,
              "Stat": "Average",
            },
            "ReturnData": false,
          },
          {
            "Id": "invalidRequests",
            "MetricStat": {
              "Metric": {
                "MetricName": "BadRequests",
                "Namespace": "TestLoadBalancerMetrics",
              },
              "Period": 3600,
              "Stat": "Average",
            },
            "ReturnData": false,
          },
        ],
        "Threshold": 0.014400000000000013,
        "TreatMissingData": "notBreaching",
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "ChildAlarmLongPeriodMapiFrontsAvailabilityMediumBurnCompositeAlarmB28EFC34": {
      "Properties": {
        "AlarmName": "ChildAlarmLongPeriodMapiFrontsAvailabilityMediumBurnCompositeAlarm",
        "ComparisonOperator": "GreaterThanThreshold",
        "EvaluationPeriods": 1,
        "Metrics": [
          {
            "Expression": "badEvents/validEvents",
            "Id": "expr_1",
            "Label": "Observed failure rate",
          },
          {
            "Expression": "loadBalancerErrors + targetErrors",
            "Id": "badEvents",
            "ReturnData": false,
          },
          {
            "Id": "loadBalancerErrors",
            "MetricStat": {
              "Metric": {
                "MetricName": "LbHttpErrors",
                "Namespace": "TestLoadBalancerMetrics",
              },
              "Period": 21600,
              "Stat": "Average",
            },
            "ReturnData": false,
          },
          {
            "Id": "targetErrors",
            "MetricStat": {
              "Metric": {
                "MetricName": "TargetHttpErrors",
                "Namespace": "TestTargetMetrics",
              },
              "Period": 21600,
              "Stat": "Average",
            },
            "ReturnData": false,
          },
          {
            "Expression": "allRequests - invalidRequests",
            "Id": "validEvents",
            "ReturnData": false,
          },
          {
            "Id": "allRequests",
            "MetricStat": {
              "Metric": {
                "MetricName": "HttpRequests",
                "Namespace": "TestLoadBalancerMetrics",
              },
              "Period": 21600,
              "Stat": "Average",
            },
            "ReturnData": false,
          },
          {
            "Id": "invalidRequests",
            "MetricStat": {
              "Metric": {
                "MetricName": "BadRequests",
                "Namespace": "TestLoadBalancerMetrics",
              },
              "Period": 21600,
              "Stat": "Average",
            },
            "ReturnData": false,
          },
        ],
        "Threshold": 0.006000000000000005,
        "TreatMissingData": "notBreaching",
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "ChildAlarmLongPeriodMapiFrontsAvailabilitySlowBurnCompositeAlarm31625779": {
      "Properties": {
        "AlarmName": "ChildAlarmLongPeriodMapiFrontsAvailabilitySlowBurnCompositeAlarm",
        "ComparisonOperator": "GreaterThanThreshold",
        "EvaluationPeriods": 1,
        "Metrics": [
          {
            "Expression": "badEvents/validEvents",
            "Id": "expr_1",
            "Label": "Observed failure rate",
          },
          {
            "Expression": "loadBalancerErrors + targetErrors",
            "Id": "badEvents",
            "ReturnData": false,
          },
          {
            "Id": "loadBalancerErrors",
            "MetricStat": {
              "Metric": {
                "MetricName": "LbHttpErrors",
                "Namespace": "TestLoadBalancerMetrics",
              },
              "Period": 86400,
              "Stat": "Average",
            },
            "ReturnData": false,
          },
          {
            "Id": "targetErrors",
            "MetricStat": {
              "Metric": {
                "MetricName": "TargetHttpErrors",
                "Namespace": "TestTargetMetrics",
              },
              "Period": 86400,
              "Stat": "Average",
            },
            "ReturnData": false,
          },
          {
            "Expression": "allRequests - invalidRequests",
            "Id": "validEvents",
            "ReturnData": false,
          },
          {
            "Id": "allRequests",
            "MetricStat": {
              "Metric": {
                "MetricName": "HttpRequests",
                "Namespace": "TestLoadBalancerMetrics",
              },
              "Period": 86400,
              "Stat": "Average",
            },
            "ReturnData": false,
          },
          {
            "Id": "invalidRequests",
            "MetricStat": {
              "Metric": {
                "MetricName": "BadRequests",
                "Namespace": "TestLoadBalancerMetrics",
              },
              "Period": 86400,
              "Stat": "Average",
            },
            "ReturnData": false,
          },
        ],
        "Threshold": 0.0030000000000000027,
        "TreatMissingData": "notBreaching",
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "ChildAlarmShortPeriodMapiFrontsAvailabilityFastBurnCompositeAlarmCF3AFF0A": {
      "Properties": {
        "AlarmName": "ChildAlarmShortPeriodMapiFrontsAvailabilityFastBurnCompositeAlarm",
        "ComparisonOperator": "GreaterThanThreshold",
        "EvaluationPeriods": 1,
        "Metrics": [
          {
            "Expression": "badEvents/validEvents",
            "Id": "expr_1",
            "Label": "Observed failure rate",
          },
          {
            "Expression": "loadBalancerErrors + targetErrors",
            "Id": "badEvents",
            "ReturnData": false,
          },
          {
            "Id": "loadBalancerErrors",
            "MetricStat": {
              "Metric": {
                "MetricName": "LbHttpErrors",
                "Namespace": "TestLoadBalancerMetrics",
              },
              "Period": 300,
              "Stat": "Average",
            },
            "ReturnData": false,
          },
          {
            "Id": "targetErrors",
            "MetricStat": {
              "Metric": {
                "MetricName": "TargetHttpErrors",
                "Namespace": "TestTargetMetrics",
              },
              "Period": 300,
              "Stat": "Average",
            },
            "ReturnData": false,
          },
          {
            "Expression": "allRequests - invalidRequests",
            "Id": "validEvents",
            "ReturnData": false,
          },
          {
            "Id": "allRequests",
            "MetricStat": {
              "Metric": {
                "MetricName": "HttpRequests",
                "Namespace": "TestLoadBalancerMetrics",
              },
              "Period": 300,
              "Stat": "Average",
            },
            "ReturnData": false,
          },
          {
            "Id": "invalidRequests",
            "MetricStat": {
              "Metric": {
                "MetricName": "BadRequests",
                "Namespace": "TestLoadBalancerMetrics",
              },
              "Period": 300,
              "Stat": "Average",
            },
            "ReturnData": false,
          },
        ],
        "Threshold": 0.014400000000000013,
        "TreatMissingData": "notBreaching",
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "ChildAlarmShortPeriodMapiFrontsAvailabilityMediumBurnCompositeAlarmDBEC21EA": {
      "Properties": {
        "AlarmName": "ChildAlarmShortPeriodMapiFrontsAvailabilityMediumBurnCompositeAlarm",
        "ComparisonOperator": "GreaterThanThreshold",
        "EvaluationPeriods": 1,
        "Metrics": [
          {
            "Expression": "badEvents/validEvents",
            "Id": "expr_1",
            "Label": "Observed failure rate",
          },
          {
            "Expression": "loadBalancerErrors + targetErrors",
            "Id": "badEvents",
            "ReturnData": false,
          },
          {
            "Id": "loadBalancerErrors",
            "MetricStat": {
              "Metric": {
                "MetricName": "LbHttpErrors",
                "Namespace": "TestLoadBalancerMetrics",
              },
              "Period": 1800,
              "Stat": "Average",
            },
            "ReturnData": false,
          },
          {
            "Id": "targetErrors",
            "MetricStat": {
              "Metric": {
                "MetricName": "TargetHttpErrors",
                "Namespace": "TestTargetMetrics",
              },
              "Period": 1800,
              "Stat": "Average",
            },
            "ReturnData": false,
          },
          {
            "Expression": "allRequests - invalidRequests",
            "Id": "validEvents",
            "ReturnData": false,
          },
          {
            "Id": "allRequests",
            "MetricStat": {
              "Metric": {
                "MetricName": "HttpRequests",
                "Namespace": "TestLoadBalancerMetrics",
              },
              "Period": 1800,
              "Stat": "Average",
            },
            "ReturnData": false,
          },
          {
            "Id": "invalidRequests",
            "MetricStat": {
              "Metric": {
                "MetricName": "BadRequests",
                "Namespace": "TestLoadBalancerMetrics",
              },
              "Period": 1800,
              "Stat": "Average",
            },
            "ReturnData": false,
          },
        ],
        "Threshold": 0.006000000000000005,
        "TreatMissingData": "notBreaching",
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "ChildAlarmShortPeriodMapiFrontsAvailabilitySlowBurnCompositeAlarmCA6C81C2": {
      "Properties": {
        "AlarmName": "ChildAlarmShortPeriodMapiFrontsAvailabilitySlowBurnCompositeAlarm",
        "ComparisonOperator": "GreaterThanThreshold",
        "EvaluationPeriods": 1,
        "Metrics": [
          {
            "Expression": "badEvents/validEvents",
            "Id": "expr_1",
            "Label": "Observed failure rate",
          },
          {
            "Expression": "loadBalancerErrors + targetErrors",
            "Id": "badEvents",
            "ReturnData": false,
          },
          {
            "Id": "loadBalancerErrors",
            "MetricStat": {
              "Metric": {
                "MetricName": "LbHttpErrors",
                "Namespace": "TestLoadBalancerMetrics",
              },
              "Period": 7200,
              "Stat": "Average",
            },
            "ReturnData": false,
          },
          {
            "Id": "targetErrors",
            "MetricStat": {
              "Metric": {
                "MetricName": "TargetHttpErrors",
                "Namespace": "TestTargetMetrics",
              },
              "Period": 7200,
              "Stat": "Average",
            },
            "ReturnData": false,
          },
          {
            "Expression": "allRequests - invalidRequests",
            "Id": "validEvents",
            "ReturnData": false,
          },
          {
            "Id": "allRequests",
            "MetricStat": {
              "Metric": {
                "MetricName": "HttpRequests",
                "Namespace": "TestLoadBalancerMetrics",
              },
              "Period": 7200,
              "Stat": "Average",
            },
            "ReturnData": false,
          },
          {
            "Id": "invalidRequests",
            "MetricStat": {
              "Metric": {
                "MetricName": "BadRequests",
                "Namespace": "TestLoadBalancerMetrics",
              },
              "Period": 7200,
              "Stat": "Average",
            },
            "ReturnData": false,
          },
        ],
        "Threshold": 0.0030000000000000027,
        "TreatMissingData": "notBreaching",
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "MapiFrontsAvailabilityFastBurnCompositeAlarmA8F736A8": {
      "Properties": {
        "AlarmActions": [
          {
            "Fn::Join": [
              "",
              [
                "arn:aws:sns:",
                {
                  "Ref": "AWS::Region",
                },
                ":",
                {
                  "Ref": "AWS::AccountId",
                },
                ":test-sns-topic",
              ],
            ],
          },
        ],
        "AlarmName": "TestMapiFrontsAvailabilityFastBurnCompositeAlarmF4979734",
        "AlarmRule": {
          "Fn::Join": [
            "",
            [
              "(ALARM("",
              {
                "Fn::GetAtt": [
                  "ChildAlarmLongPeriodMapiFrontsAvailabilityFastBurnCompositeAlarmF1A44641",
                  "Arn",
                ],
              },
              "") AND ALARM("",
              {
                "Fn::GetAtt": [
                  "ChildAlarmShortPeriodMapiFrontsAvailabilityFastBurnCompositeAlarmCF3AFF0A",
                  "Arn",
                ],
              },
              ""))",
            ],
          ],
        },
      },
      "Type": "AWS::CloudWatch::CompositeAlarm",
    },
    "MapiFrontsAvailabilityMediumBurnCompositeAlarmEC8DC379": {
      "Properties": {
        "ActionsSuppressor": {
          "Fn::GetAtt": [
            "MapiFrontsAvailabilityFastBurnCompositeAlarmA8F736A8",
            "Arn",
          ],
        },
        "ActionsSuppressorExtensionPeriod": 1800,
        "ActionsSuppressorWaitPeriod": 120,
        "AlarmActions": [
          {
            "Fn::Join": [
              "",
              [
                "arn:aws:sns:",
                {
                  "Ref": "AWS::Region",
                },
                ":",
                {
                  "Ref": "AWS::AccountId",
                },
                ":test-sns-topic",
              ],
            ],
          },
        ],
        "AlarmName": "TestMapiFrontsAvailabilityMediumBurnCompositeAlarm7022D40E",
        "AlarmRule": {
          "Fn::Join": [
            "",
            [
              "(ALARM("",
              {
                "Fn::GetAtt": [
                  "ChildAlarmLongPeriodMapiFrontsAvailabilityMediumBurnCompositeAlarmB28EFC34",
                  "Arn",
                ],
              },
              "") AND ALARM("",
              {
                "Fn::GetAtt": [
                  "ChildAlarmShortPeriodMapiFrontsAvailabilityMediumBurnCompositeAlarmDBEC21EA",
                  "Arn",
                ],
              },
              ""))",
            ],
          ],
        },
      },
      "Type": "AWS::CloudWatch::CompositeAlarm",
    },
    "MapiFrontsAvailabilitySlowBurnCompositeAlarm1198F7B4": {
      "Properties": {
        "ActionsSuppressor": {
          "Fn::GetAtt": [
            "MapiFrontsAvailabilityMediumBurnCompositeAlarmEC8DC379",
            "Arn",
          ],
        },
        "ActionsSuppressorExtensionPeriod": 7200,
        "ActionsSuppressorWaitPeriod": 120,
        "AlarmActions": [
          {
            "Fn::Join": [
              "",
              [
                "arn:aws:sns:",
                {
                  "Ref": "AWS::Region",
                },
                ":",
                {
                  "Ref": "AWS::AccountId",
                },
                ":test-sns-topic",
              ],
            ],
          },
        ],
        "AlarmName": "TestMapiFrontsAvailabilitySlowBurnCompositeAlarm5EDECA5E",
        "AlarmRule": {
          "Fn::Join": [
            "",
            [
              "(ALARM("",
              {
                "Fn::GetAtt": [
                  "ChildAlarmLongPeriodMapiFrontsAvailabilitySlowBurnCompositeAlarm31625779",
                  "Arn",
                ],
              },
              "") AND ALARM("",
              {
                "Fn::GetAtt": [
                  "ChildAlarmShortPeriodMapiFrontsAvailabilitySlowBurnCompositeAlarmCA6C81C2",
                  "Arn",
                ],
              },
              ""))",
            ],
          ],
        },
      },
      "Type": "AWS::CloudWatch::CompositeAlarm",
    },
  },
}
`;

exports[`The ErrorBudgetAlarmExperimental construct should create the correct resources for a simple Availability SLO 1`] = `
{
  "Metadata": {
    "gu:cdk:constructs": [
      "GuStack",
      "GuVpcParameter",
      "GuSubnetListParameter",
      "GuSubnetListParameter",
      "GuEc2App",
      "GuCertificate",
      "GuInstanceRole",
      "GuSSMRunCommandPolicy",
      "GuDescribeEC2Policy",
      "GuLoggingStreamNameParameter",
      "GuLogShippingPolicy",
      "GuDistributionBucketParameter",
      "GuGetDistributablePolicy",
      "GuParameterStoreReadPolicy",
      "GuAmiParameter",
      "GuHttpsEgressSecurityGroup",
      "GuAutoScalingGroup",
      "GuWazuhAccess",
      "GuApplicationLoadBalancer",
      "GuApplicationTargetGroup",
      "GuHttpsApplicationListener",
      "GuErrorBudgetAlarmExperimental",
    ],
    "gu:cdk:version": "TEST",
  },
  "Outputs": {
    "LoadBalancerTestguec2appDnsName": {
      "Description": "DNS entry for LoadBalancerTestguec2app",
      "Value": {
        "Fn::GetAtt": [
          "LoadBalancerTestguec2appC77A055C",
          "DNSName",
        ],
      },
    },
  },
  "Parameters": {
    "AMITestguec2app": {
      "Description": "Amazon Machine Image ID for the app test-gu-ec2-app. Use this in conjunction with AMIgo to keep AMIs up to date.",
      "Type": "AWS::EC2::Image::Id",
    },
    "DistributionBucketName": {
      "Default": "/account/services/artifact.bucket",
      "Description": "SSM parameter containing the S3 bucket name holding distribution artifacts",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
    "LoggingStreamName": {
      "Default": "/account/services/logging.stream.name",
      "Description": "SSM parameter containing the Name (not ARN) on the kinesis stream",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
    "VpcId": {
      "Default": "/account/vpc/primary/id",
      "Description": "Virtual Private Cloud to run EC2 instances within. Should NOT be the account default VPC.",
      "Type": "AWS::SSM::Parameter::Value<AWS::EC2::VPC::Id>",
    },
    "testguec2appPrivateSubnets": {
      "Default": "/account/vpc/primary/subnets/private",
      "Description": "A list of private subnets",
      "Type": "AWS::SSM::Parameter::Value<List<AWS::EC2::Subnet::Id>>",
    },
    "testguec2appPublicSubnets": {
      "Default": "/account/vpc/primary/subnets/public",
      "Description": "A list of public subnets",
      "Type": "AWS::SSM::Parameter::Value<List<AWS::EC2::Subnet::Id>>",
    },
  },
  "Resources": {
    "AutoScalingGroupTestguec2appASG49EA1878": {
      "Properties": {
        "HealthCheckGracePeriod": 120,
        "HealthCheckType": "ELB",
        "LaunchConfigurationName": {
          "Ref": "AutoScalingGroupTestguec2appLaunchConfigA7394577",
        },
        "MaxSize": "2",
        "MinSize": "1",
        "Tags": [
          {
            "Key": "App",
            "PropagateAtLaunch": true,
            "Value": "test-gu-ec2-app",
          },
          {
            "Key": "gu:cdk:pattern-name",
            "PropagateAtLaunch": true,
            "Value": "GuEc2App",
          },
          {
            "Key": "gu:cdk:version",
            "PropagateAtLaunch": true,
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "PropagateAtLaunch": true,
            "Value": "guardian/cdk",
          },
          {
            "Key": "LogKinesisStreamName",
            "PropagateAtLaunch": true,
            "Value": {
              "Ref": "LoggingStreamName",
            },
          },
          {
            "Key": "Name",
            "PropagateAtLaunch": true,
            "Value": "Test/AutoScalingGroupTestguec2app",
          },
          {
            "Key": "Stack",
            "PropagateAtLaunch": true,
            "Value": "test-stack",
          },
          {
            "Key": "Stage",
            "PropagateAtLaunch": true,
            "Value": "TEST",
          },
        ],
        "TargetGroupARNs": [
          {
            "Ref": "TargetGroupTestguec2app9F67D503",
          },
        ],
        "VPCZoneIdentifier": {
          "Ref": "testguec2appPrivateSubnets",
        },
      },
      "Type": "AWS::AutoScaling::AutoScalingGroup",
    },
    "AutoScalingGroupTestguec2appInstanceProfile69E61F9E": {
      "Properties": {
        "Roles": [
          {
            "Ref": "InstanceRoleTestguec2appC325BE42",
          },
        ],
      },
      "Type": "AWS::IAM::InstanceProfile",
    },
    "AutoScalingGroupTestguec2appLaunchConfigA7394577": {
      "DependsOn": [
        "InstanceRoleTestguec2appC325BE42",
      ],
      "Properties": {
        "IamInstanceProfile": {
          "Ref": "AutoScalingGroupTestguec2appInstanceProfile69E61F9E",
        },
        "ImageId": {
          "Ref": "AMITestguec2app",
        },
        "InstanceType": "t4g.medium",
        "MetadataOptions": {
          "HttpTokens": "required",
        },
        "SecurityGroups": [
          {
            "Fn::GetAtt": [
              "GuHttpsEgressSecurityGroupTestguec2appEBD7B195",
              "GroupId",
            ],
          },
          {
            "Fn::GetAtt": [
              "WazuhSecurityGroup",
              "GroupId",
            ],
          },
        ],
        "UserData": {
          "Fn::Base64": "#!/bin/dev foobarbaz",
        },
      },
      "Type": "AWS::AutoScaling::LaunchConfiguration",
    },
    "CertificateTestguec2app86EE2D42": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "DomainName": "code-guardian.com",
        "Tags": [
          {
            "Key": "App",
            "Value": "test-gu-ec2-app",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/cdk",
          },
          {
            "Key": "Name",
            "Value": "Test/CertificateTestguec2app",
          },
          {
            "Key": "Stack",
            "Value": "test-stack",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "ValidationMethod": "DNS",
      },
      "Type": "AWS::CertificateManager::Certificate",
      "UpdateReplacePolicy": "Retain",
    },
    "ChildAlarmLongPeriodMapiFrontsAvailabilityFastBurnCompositeAlarmF1A44641": {
      "Properties": {
        "AlarmName": "ChildAlarmLongPeriodMapiFrontsAvailabilityFastBurnCompositeAlarm",
        "ComparisonOperator": "GreaterThanThreshold",
        "EvaluationPeriods": 1,
        "Metrics": [
          {
            "Expression": "badEvents/validEvents",
            "Id": "expr_1",
            "Label": "Observed failure rate",
          },
          {
            "Expression": "loadBalancer5xxErrors + instance5xxErrors",
            "Id": "badEvents",
            "ReturnData": false,
          },
          {
            "Id": "loadBalancer5xxErrors",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "LoadBalancer",
                    "Value": {
                      "Fn::GetAtt": [
                        "LoadBalancerTestguec2appC77A055C",
                        "LoadBalancerFullName",
                      ],
                    },
                  },
                ],
                "MetricName": "HTTPCode_Target_5XX_Count",
                "Namespace": "AWS/ApplicationELB",
              },
              "Period": 3600,
              "Stat": "Sum",
            },
            "ReturnData": false,
          },
          {
            "Id": "instance5xxErrors",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "LoadBalancer",
                    "Value": {
                      "Fn::GetAtt": [
                        "LoadBalancerTestguec2appC77A055C",
                        "LoadBalancerFullName",
                      ],
                    },
                  },
                ],
                "MetricName": "HTTPCode_ELB_5XX_Count",
                "Namespace": "AWS/ApplicationELB",
              },
              "Period": 3600,
              "Stat": "Sum",
            },
            "ReturnData": false,
          },
          {
            "Id": "validEvents",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "LoadBalancer",
                    "Value": {
                      "Fn::GetAtt": [
                        "LoadBalancerTestguec2appC77A055C",
                        "LoadBalancerFullName",
                      ],
                    },
                  },
                ],
                "MetricName": "RequestCount",
                "Namespace": "AWS/ApplicationELB",
              },
              "Period": 3600,
              "Stat": "Sum",
            },
            "ReturnData": false,
          },
        ],
        "Threshold": 0.014400000000000013,
        "TreatMissingData": "notBreaching",
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "ChildAlarmLongPeriodMapiFrontsAvailabilityMediumBurnCompositeAlarmB28EFC34": {
      "Properties": {
        "AlarmName": "ChildAlarmLongPeriodMapiFrontsAvailabilityMediumBurnCompositeAlarm",
        "ComparisonOperator": "GreaterThanThreshold",
        "EvaluationPeriods": 1,
        "Metrics": [
          {
            "Expression": "badEvents/validEvents",
            "Id": "expr_1",
            "Label": "Observed failure rate",
          },
          {
            "Expression": "loadBalancer5xxErrors + instance5xxErrors",
            "Id": "badEvents",
            "ReturnData": false,
          },
          {
            "Id": "loadBalancer5xxErrors",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "LoadBalancer",
                    "Value": {
                      "Fn::GetAtt": [
                        "LoadBalancerTestguec2appC77A055C",
                        "LoadBalancerFullName",
                      ],
                    },
                  },
                ],
                "MetricName": "HTTPCode_Target_5XX_Count",
                "Namespace": "AWS/ApplicationELB",
              },
              "Period": 21600,
              "Stat": "Sum",
            },
            "ReturnData": false,
          },
          {
            "Id": "instance5xxErrors",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "LoadBalancer",
                    "Value": {
                      "Fn::GetAtt": [
                        "LoadBalancerTestguec2appC77A055C",
                        "LoadBalancerFullName",
                      ],
                    },
                  },
                ],
                "MetricName": "HTTPCode_ELB_5XX_Count",
                "Namespace": "AWS/ApplicationELB",
              },
              "Period": 21600,
              "Stat": "Sum",
            },
            "ReturnData": false,
          },
          {
            "Id": "validEvents",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "LoadBalancer",
                    "Value": {
                      "Fn::GetAtt": [
                        "LoadBalancerTestguec2appC77A055C",
                        "LoadBalancerFullName",
                      ],
                    },
                  },
                ],
                "MetricName": "RequestCount",
                "Namespace": "AWS/ApplicationELB",
              },
              "Period": 21600,
              "Stat": "Sum",
            },
            "ReturnData": false,
          },
        ],
        "Threshold": 0.006000000000000005,
        "TreatMissingData": "notBreaching",
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "ChildAlarmLongPeriodMapiFrontsAvailabilitySlowBurnCompositeAlarm31625779": {
      "Properties": {
        "AlarmName": "ChildAlarmLongPeriodMapiFrontsAvailabilitySlowBurnCompositeAlarm",
        "ComparisonOperator": "GreaterThanThreshold",
        "EvaluationPeriods": 1,
        "Metrics": [
          {
            "Expression": "badEvents/validEvents",
            "Id": "expr_1",
            "Label": "Observed failure rate",
          },
          {
            "Expression": "loadBalancer5xxErrors + instance5xxErrors",
            "Id": "badEvents",
            "ReturnData": false,
          },
          {
            "Id": "loadBalancer5xxErrors",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "LoadBalancer",
                    "Value": {
                      "Fn::GetAtt": [
                        "LoadBalancerTestguec2appC77A055C",
                        "LoadBalancerFullName",
                      ],
                    },
                  },
                ],
                "MetricName": "HTTPCode_Target_5XX_Count",
                "Namespace": "AWS/ApplicationELB",
              },
              "Period": 86400,
              "Stat": "Sum",
            },
            "ReturnData": false,
          },
          {
            "Id": "instance5xxErrors",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "LoadBalancer",
                    "Value": {
                      "Fn::GetAtt": [
                        "LoadBalancerTestguec2appC77A055C",
                        "LoadBalancerFullName",
                      ],
                    },
                  },
                ],
                "MetricName": "HTTPCode_ELB_5XX_Count",
                "Namespace": "AWS/ApplicationELB",
              },
              "Period": 86400,
              "Stat": "Sum",
            },
            "ReturnData": false,
          },
          {
            "Id": "validEvents",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "LoadBalancer",
                    "Value": {
                      "Fn::GetAtt": [
                        "LoadBalancerTestguec2appC77A055C",
                        "LoadBalancerFullName",
                      ],
                    },
                  },
                ],
                "MetricName": "RequestCount",
                "Namespace": "AWS/ApplicationELB",
              },
              "Period": 86400,
              "Stat": "Sum",
            },
            "ReturnData": false,
          },
        ],
        "Threshold": 0.0030000000000000027,
        "TreatMissingData": "notBreaching",
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "ChildAlarmShortPeriodMapiFrontsAvailabilityFastBurnCompositeAlarmCF3AFF0A": {
      "Properties": {
        "AlarmName": "ChildAlarmShortPeriodMapiFrontsAvailabilityFastBurnCompositeAlarm",
        "ComparisonOperator": "GreaterThanThreshold",
        "EvaluationPeriods": 1,
        "Metrics": [
          {
            "Expression": "badEvents/validEvents",
            "Id": "expr_1",
            "Label": "Observed failure rate",
          },
          {
            "Expression": "loadBalancer5xxErrors + instance5xxErrors",
            "Id": "badEvents",
            "ReturnData": false,
          },
          {
            "Id": "loadBalancer5xxErrors",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "LoadBalancer",
                    "Value": {
                      "Fn::GetAtt": [
                        "LoadBalancerTestguec2appC77A055C",
                        "LoadBalancerFullName",
                      ],
                    },
                  },
                ],
                "MetricName": "HTTPCode_Target_5XX_Count",
                "Namespace": "AWS/ApplicationELB",
              },
              "Period": 300,
              "Stat": "Sum",
            },
            "ReturnData": false,
          },
          {
            "Id": "instance5xxErrors",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "LoadBalancer",
                    "Value": {
                      "Fn::GetAtt": [
                        "LoadBalancerTestguec2appC77A055C",
                        "LoadBalancerFullName",
                      ],
                    },
                  },
                ],
                "MetricName": "HTTPCode_ELB_5XX_Count",
                "Namespace": "AWS/ApplicationELB",
              },
              "Period": 300,
              "Stat": "Sum",
            },
            "ReturnData": false,
          },
          {
            "Id": "validEvents",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "LoadBalancer",
                    "Value": {
                      "Fn::GetAtt": [
                        "LoadBalancerTestguec2appC77A055C",
                        "LoadBalancerFullName",
                      ],
                    },
                  },
                ],
                "MetricName": "RequestCount",
                "Namespace": "AWS/ApplicationELB",
              },
              "Period": 300,
              "Stat": "Sum",
            },
            "ReturnData": false,
          },
        ],
        "Threshold": 0.014400000000000013,
        "TreatMissingData": "notBreaching",
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "ChildAlarmShortPeriodMapiFrontsAvailabilityMediumBurnCompositeAlarmDBEC21EA": {
      "Properties": {
        "AlarmName": "ChildAlarmShortPeriodMapiFrontsAvailabilityMediumBurnCompositeAlarm",
        "ComparisonOperator": "GreaterThanThreshold",
        "EvaluationPeriods": 1,
        "Metrics": [
          {
            "Expression": "badEvents/validEvents",
            "Id": "expr_1",
            "Label": "Observed failure rate",
          },
          {
            "Expression": "loadBalancer5xxErrors + instance5xxErrors",
            "Id": "badEvents",
            "ReturnData": false,
          },
          {
            "Id": "loadBalancer5xxErrors",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "LoadBalancer",
                    "Value": {
                      "Fn::GetAtt": [
                        "LoadBalancerTestguec2appC77A055C",
                        "LoadBalancerFullName",
                      ],
                    },
                  },
                ],
                "MetricName": "HTTPCode_Target_5XX_Count",
                "Namespace": "AWS/ApplicationELB",
              },
              "Period": 1800,
              "Stat": "Sum",
            },
            "ReturnData": false,
          },
          {
            "Id": "instance5xxErrors",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "LoadBalancer",
                    "Value": {
                      "Fn::GetAtt": [
                        "LoadBalancerTestguec2appC77A055C",
                        "LoadBalancerFullName",
                      ],
                    },
                  },
                ],
                "MetricName": "HTTPCode_ELB_5XX_Count",
                "Namespace": "AWS/ApplicationELB",
              },
              "Period": 1800,
              "Stat": "Sum",
            },
            "ReturnData": false,
          },
          {
            "Id": "validEvents",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "LoadBalancer",
                    "Value": {
                      "Fn::GetAtt": [
                        "LoadBalancerTestguec2appC77A055C",
                        "LoadBalancerFullName",
                      ],
                    },
                  },
                ],
                "MetricName": "RequestCount",
                "Namespace": "AWS/ApplicationELB",
              },
              "Period": 1800,
              "Stat": "Sum",
            },
            "ReturnData": false,
          },
        ],
        "Threshold": 0.006000000000000005,
        "TreatMissingData": "notBreaching",
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "ChildAlarmShortPeriodMapiFrontsAvailabilitySlowBurnCompositeAlarmCA6C81C2": {
      "Properties": {
        "AlarmName": "ChildAlarmShortPeriodMapiFrontsAvailabilitySlowBurnCompositeAlarm",
        "ComparisonOperator": "GreaterThanThreshold",
        "EvaluationPeriods": 1,
        "Metrics": [
          {
            "Expression": "badEvents/validEvents",
            "Id": "expr_1",
            "Label": "Observed failure rate",
          },
          {
            "Expression": "loadBalancer5xxErrors + instance5xxErrors",
            "Id": "badEvents",
            "ReturnData": false,
          },
          {
            "Id": "loadBalancer5xxErrors",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "LoadBalancer",
                    "Value": {
                      "Fn::GetAtt": [
                        "LoadBalancerTestguec2appC77A055C",
                        "LoadBalancerFullName",
                      ],
                    },
                  },
                ],
                "MetricName": "HTTPCode_Target_5XX_Count",
                "Namespace": "AWS/ApplicationELB",
              },
              "Period": 7200,
              "Stat": "Sum",
            },
            "ReturnData": false,
          },
          {
            "Id": "instance5xxErrors",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "LoadBalancer",
                    "Value": {
                      "Fn::GetAtt": [
                        "LoadBalancerTestguec2appC77A055C",
                        "LoadBalancerFullName",
                      ],
                    },
                  },
                ],
                "MetricName": "HTTPCode_ELB_5XX_Count",
                "Namespace": "AWS/ApplicationELB",
              },
              "Period": 7200,
              "Stat": "Sum",
            },
            "ReturnData": false,
          },
          {
            "Id": "validEvents",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "LoadBalancer",
                    "Value": {
                      "Fn::GetAtt": [
                        "LoadBalancerTestguec2appC77A055C",
                        "LoadBalancerFullName",
                      ],
                    },
                  },
                ],
                "MetricName": "RequestCount",
                "Namespace": "AWS/ApplicationELB",
              },
              "Period": 7200,
              "Stat": "Sum",
            },
            "ReturnData": false,
          },
        ],
        "Threshold": 0.0030000000000000027,
        "TreatMissingData": "notBreaching",
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "DescribeEC2PolicyFF5F9295": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "autoscaling:DescribeAutoScalingInstances",
                "autoscaling:DescribeAutoScalingGroups",
                "ec2:DescribeTags",
                "ec2:DescribeInstances",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "describe-ec2-policy",
        "Roles": [
          {
            "Ref": "InstanceRoleTestguec2appC325BE42",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "GetDistributablePolicyTestguec2app6A8D1854": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:GetObject",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "DistributionBucketName",
                    },
                    "/test-stack/TEST/test-gu-ec2-app/*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "GetDistributablePolicyTestguec2app6A8D1854",
        "Roles": [
          {
            "Ref": "InstanceRoleTestguec2appC325BE42",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "GuHttpsEgressSecurityGroupTestguec2appEBD7B195": {
      "Properties": {
        "GroupDescription": "Allow all outbound HTTPS traffic",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound HTTPS traffic",
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443,
          },
        ],
        "Tags": [
          {
            "Key": "App",
            "Value": "test-gu-ec2-app",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/cdk",
          },
          {
            "Key": "Stack",
            "Value": "test-stack",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "VpcId": {
          "Ref": "VpcId",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "GuHttpsEgressSecurityGroupTestguec2appfromTestLoadBalancerTestguec2appSecurityGroup5F9E11C9300051FB63C7": {
      "Properties": {
        "Description": "Load balancer to target",
        "FromPort": 3000,
        "GroupId": {
          "Fn::GetAtt": [
            "GuHttpsEgressSecurityGroupTestguec2appEBD7B195",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "LoadBalancerTestguec2appSecurityGroupCC6F85C1",
            "GroupId",
          ],
        },
        "ToPort": 3000,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "GuLogShippingPolicy981BFE5A": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kinesis:Describe*",
                "kinesis:Put*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:kinesis:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":stream/",
                    {
                      "Ref": "LoggingStreamName",
                    },
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "GuLogShippingPolicy981BFE5A",
        "Roles": [
          {
            "Ref": "InstanceRoleTestguec2appC325BE42",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "InstanceRoleTestguec2appC325BE42": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": {
                  "Fn::Join": [
                    "",
                    [
                      "ec2.",
                      {
                        "Ref": "AWS::URLSuffix",
                      },
                    ],
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Path": "/",
        "Tags": [
          {
            "Key": "App",
            "Value": "test-gu-ec2-app",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/cdk",
          },
          {
            "Key": "Stack",
            "Value": "test-stack",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ListenerTestguec2app4FBB034F": {
      "Properties": {
        "Certificates": [
          {
            "CertificateArn": {
              "Ref": "CertificateTestguec2app86EE2D42",
            },
          },
        ],
        "DefaultActions": [
          {
            "TargetGroupArn": {
              "Ref": "TargetGroupTestguec2app9F67D503",
            },
            "Type": "forward",
          },
        ],
        "LoadBalancerArn": {
          "Ref": "LoadBalancerTestguec2appC77A055C",
        },
        "Port": 443,
        "Protocol": "HTTPS",
      },
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
    },
    "LoadBalancerTestguec2appC77A055C": {
      "Properties": {
        "LoadBalancerAttributes": [
          {
            "Key": "deletion_protection.enabled",
            "Value": "true",
          },
        ],
        "Scheme": "internet-facing",
        "SecurityGroups": [
          {
            "Fn::GetAtt": [
              "LoadBalancerTestguec2appSecurityGroupCC6F85C1",
              "GroupId",
            ],
          },
        ],
        "Subnets": {
          "Ref": "testguec2appPublicSubnets",
        },
        "Tags": [
          {
            "Key": "App",
            "Value": "test-gu-ec2-app",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/cdk",
          },
          {
            "Key": "Stack",
            "Value": "test-stack",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "Type": "application",
      },
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
    },
    "LoadBalancerTestguec2appSecurityGroupCC6F85C1": {
      "Properties": {
        "GroupDescription": "Automatically created Security Group for ELB TestLoadBalancerTestguec2app8CD12AE9",
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow from anyone on port 443",
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443,
          },
        ],
        "Tags": [
          {
            "Key": "App",
            "Value": "test-gu-ec2-app",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/cdk",
          },
          {
            "Key": "Stack",
            "Value": "test-stack",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "VpcId": {
          "Ref": "VpcId",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "LoadBalancerTestguec2appSecurityGrouptoTestGuHttpsEgressSecurityGroupTestguec2appE5EE51F53000FE644240": {
      "Properties": {
        "Description": "Load balancer to target",
        "DestinationSecurityGroupId": {
          "Fn::GetAtt": [
            "GuHttpsEgressSecurityGroupTestguec2appEBD7B195",
            "GroupId",
          ],
        },
        "FromPort": 3000,
        "GroupId": {
          "Fn::GetAtt": [
            "LoadBalancerTestguec2appSecurityGroupCC6F85C1",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "ToPort": 3000,
      },
      "Type": "AWS::EC2::SecurityGroupEgress",
    },
    "MapiFrontsAvailabilityFastBurnCompositeAlarmA8F736A8": {
      "Properties": {
        "AlarmActions": [
          {
            "Fn::Join": [
              "",
              [
                "arn:aws:sns:",
                {
                  "Ref": "AWS::Region",
                },
                ":",
                {
                  "Ref": "AWS::AccountId",
                },
                ":test-sns-topic",
              ],
            ],
          },
        ],
        "AlarmName": "TestMapiFrontsAvailabilityFastBurnCompositeAlarmF4979734",
        "AlarmRule": {
          "Fn::Join": [
            "",
            [
              "(ALARM("",
              {
                "Fn::GetAtt": [
                  "ChildAlarmLongPeriodMapiFrontsAvailabilityFastBurnCompositeAlarmF1A44641",
                  "Arn",
                ],
              },
              "") AND ALARM("",
              {
                "Fn::GetAtt": [
                  "ChildAlarmShortPeriodMapiFrontsAvailabilityFastBurnCompositeAlarmCF3AFF0A",
                  "Arn",
                ],
              },
              ""))",
            ],
          ],
        },
      },
      "Type": "AWS::CloudWatch::CompositeAlarm",
    },
    "MapiFrontsAvailabilityMediumBurnCompositeAlarmEC8DC379": {
      "Properties": {
        "ActionsSuppressor": {
          "Fn::GetAtt": [
            "MapiFrontsAvailabilityFastBurnCompositeAlarmA8F736A8",
            "Arn",
          ],
        },
        "ActionsSuppressorExtensionPeriod": 1800,
        "ActionsSuppressorWaitPeriod": 120,
        "AlarmActions": [
          {
            "Fn::Join": [
              "",
              [
                "arn:aws:sns:",
                {
                  "Ref": "AWS::Region",
                },
                ":",
                {
                  "Ref": "AWS::AccountId",
                },
                ":test-sns-topic",
              ],
            ],
          },
        ],
        "AlarmName": "TestMapiFrontsAvailabilityMediumBurnCompositeAlarm7022D40E",
        "AlarmRule": {
          "Fn::Join": [
            "",
            [
              "(ALARM("",
              {
                "Fn::GetAtt": [
                  "ChildAlarmLongPeriodMapiFrontsAvailabilityMediumBurnCompositeAlarmB28EFC34",
                  "Arn",
                ],
              },
              "") AND ALARM("",
              {
                "Fn::GetAtt": [
                  "ChildAlarmShortPeriodMapiFrontsAvailabilityMediumBurnCompositeAlarmDBEC21EA",
                  "Arn",
                ],
              },
              ""))",
            ],
          ],
        },
      },
      "Type": "AWS::CloudWatch::CompositeAlarm",
    },
    "MapiFrontsAvailabilitySlowBurnCompositeAlarm1198F7B4": {
      "Properties": {
        "ActionsSuppressor": {
          "Fn::GetAtt": [
            "MapiFrontsAvailabilityMediumBurnCompositeAlarmEC8DC379",
            "Arn",
          ],
        },
        "ActionsSuppressorExtensionPeriod": 7200,
        "ActionsSuppressorWaitPeriod": 120,
        "AlarmActions": [
          {
            "Fn::Join": [
              "",
              [
                "arn:aws:sns:",
                {
                  "Ref": "AWS::Region",
                },
                ":",
                {
                  "Ref": "AWS::AccountId",
                },
                ":test-sns-topic",
              ],
            ],
          },
        ],
        "AlarmName": "TestMapiFrontsAvailabilitySlowBurnCompositeAlarm5EDECA5E",
        "AlarmRule": {
          "Fn::Join": [
            "",
            [
              "(ALARM("",
              {
                "Fn::GetAtt": [
                  "ChildAlarmLongPeriodMapiFrontsAvailabilitySlowBurnCompositeAlarm31625779",
                  "Arn",
                ],
              },
              "") AND ALARM("",
              {
                "Fn::GetAtt": [
                  "ChildAlarmShortPeriodMapiFrontsAvailabilitySlowBurnCompositeAlarmCA6C81C2",
                  "Arn",
                ],
              },
              ""))",
            ],
          ],
        },
      },
      "Type": "AWS::CloudWatch::CompositeAlarm",
    },
    "ParameterStoreReadTestguec2app072DCDE1": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ssm:GetParametersByPath",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:ssm:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/TEST/test-stack/test-gu-ec2-app",
                  ],
                ],
              },
            },
            {
              "Action": [
                "ssm:GetParameters",
                "ssm:GetParameter",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:ssm:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/TEST/test-stack/test-gu-ec2-app/*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "parameter-store-read-policy",
        "Roles": [
          {
            "Ref": "InstanceRoleTestguec2appC325BE42",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SSMRunCommandPolicy244E1613": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ec2messages:AcknowledgeMessage",
                "ec2messages:DeleteMessage",
                "ec2messages:FailMessage",
                "ec2messages:GetEndpoint",
                "ec2messages:GetMessages",
                "ec2messages:SendReply",
                "ssm:UpdateInstanceInformation",
                "ssm:ListInstanceAssociations",
                "ssm:DescribeInstanceProperties",
                "ssm:DescribeDocumentParameters",
                "ssmmessages:CreateControlChannel",
                "ssmmessages:CreateDataChannel",
                "ssmmessages:OpenControlChannel",
                "ssmmessages:OpenDataChannel",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ssm-run-command-policy",
        "Roles": [
          {
            "Ref": "InstanceRoleTestguec2appC325BE42",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "TargetGroupTestguec2app9F67D503": {
      "Properties": {
        "HealthCheckIntervalSeconds": 10,
        "HealthCheckPath": "/healthcheck",
        "HealthCheckProtocol": "HTTP",
        "HealthCheckTimeoutSeconds": 5,
        "HealthyThresholdCount": 5,
        "Port": 3000,
        "Protocol": "HTTP",
        "Tags": [
          {
            "Key": "App",
            "Value": "test-gu-ec2-app",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/cdk",
          },
          {
            "Key": "Stack",
            "Value": "test-stack",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "TargetGroupAttributes": [
          {
            "Key": "deregistration_delay.timeout_seconds",
            "Value": "30",
          },
          {
            "Key": "stickiness.enabled",
            "Value": "false",
          },
        ],
        "TargetType": "instance",
        "UnhealthyThresholdCount": 2,
        "VpcId": {
          "Ref": "VpcId",
        },
      },
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
    },
    "WazuhSecurityGroup": {
      "Properties": {
        "GroupDescription": "Allow outbound traffic from wazuh agent to manager",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Wazuh event logging",
            "FromPort": 1514,
            "IpProtocol": "tcp",
            "ToPort": 1514,
          },
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Wazuh agent registration",
            "FromPort": 1515,
            "IpProtocol": "tcp",
            "ToPort": 1515,
          },
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/cdk",
          },
          {
            "Key": "Stack",
            "Value": "test-stack",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "VpcId": {
          "Ref": "VpcId",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
  },
}
`;

exports[`The ErrorBudgetAlarmExperimental construct should create the correct resources for a simple Latency SLO 1`] = `
{
  "Metadata": {
    "gu:cdk:constructs": [
      "GuStack",
      "GuVpcParameter",
      "GuSubnetListParameter",
      "GuSubnetListParameter",
      "GuEc2App",
      "GuCertificate",
      "GuInstanceRole",
      "GuSSMRunCommandPolicy",
      "GuDescribeEC2Policy",
      "GuLoggingStreamNameParameter",
      "GuLogShippingPolicy",
      "GuDistributionBucketParameter",
      "GuGetDistributablePolicy",
      "GuParameterStoreReadPolicy",
      "GuAmiParameter",
      "GuHttpsEgressSecurityGroup",
      "GuAutoScalingGroup",
      "GuWazuhAccess",
      "GuApplicationLoadBalancer",
      "GuApplicationTargetGroup",
      "GuHttpsApplicationListener",
      "GuErrorBudgetAlarmExperimental",
    ],
    "gu:cdk:version": "TEST",
  },
  "Outputs": {
    "LoadBalancerTestguec2appDnsName": {
      "Description": "DNS entry for LoadBalancerTestguec2app",
      "Value": {
        "Fn::GetAtt": [
          "LoadBalancerTestguec2appC77A055C",
          "DNSName",
        ],
      },
    },
  },
  "Parameters": {
    "AMITestguec2app": {
      "Description": "Amazon Machine Image ID for the app test-gu-ec2-app. Use this in conjunction with AMIgo to keep AMIs up to date.",
      "Type": "AWS::EC2::Image::Id",
    },
    "DistributionBucketName": {
      "Default": "/account/services/artifact.bucket",
      "Description": "SSM parameter containing the S3 bucket name holding distribution artifacts",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
    "LoggingStreamName": {
      "Default": "/account/services/logging.stream.name",
      "Description": "SSM parameter containing the Name (not ARN) on the kinesis stream",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
    "VpcId": {
      "Default": "/account/vpc/primary/id",
      "Description": "Virtual Private Cloud to run EC2 instances within. Should NOT be the account default VPC.",
      "Type": "AWS::SSM::Parameter::Value<AWS::EC2::VPC::Id>",
    },
    "testguec2appPrivateSubnets": {
      "Default": "/account/vpc/primary/subnets/private",
      "Description": "A list of private subnets",
      "Type": "AWS::SSM::Parameter::Value<List<AWS::EC2::Subnet::Id>>",
    },
    "testguec2appPublicSubnets": {
      "Default": "/account/vpc/primary/subnets/public",
      "Description": "A list of public subnets",
      "Type": "AWS::SSM::Parameter::Value<List<AWS::EC2::Subnet::Id>>",
    },
  },
  "Resources": {
    "AutoScalingGroupTestguec2appASG49EA1878": {
      "Properties": {
        "HealthCheckGracePeriod": 120,
        "HealthCheckType": "ELB",
        "LaunchConfigurationName": {
          "Ref": "AutoScalingGroupTestguec2appLaunchConfigA7394577",
        },
        "MaxSize": "2",
        "MinSize": "1",
        "Tags": [
          {
            "Key": "App",
            "PropagateAtLaunch": true,
            "Value": "test-gu-ec2-app",
          },
          {
            "Key": "gu:cdk:pattern-name",
            "PropagateAtLaunch": true,
            "Value": "GuEc2App",
          },
          {
            "Key": "gu:cdk:version",
            "PropagateAtLaunch": true,
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "PropagateAtLaunch": true,
            "Value": "guardian/cdk",
          },
          {
            "Key": "LogKinesisStreamName",
            "PropagateAtLaunch": true,
            "Value": {
              "Ref": "LoggingStreamName",
            },
          },
          {
            "Key": "Name",
            "PropagateAtLaunch": true,
            "Value": "Test/AutoScalingGroupTestguec2app",
          },
          {
            "Key": "Stack",
            "PropagateAtLaunch": true,
            "Value": "test-stack",
          },
          {
            "Key": "Stage",
            "PropagateAtLaunch": true,
            "Value": "TEST",
          },
        ],
        "TargetGroupARNs": [
          {
            "Ref": "TargetGroupTestguec2app9F67D503",
          },
        ],
        "VPCZoneIdentifier": {
          "Ref": "testguec2appPrivateSubnets",
        },
      },
      "Type": "AWS::AutoScaling::AutoScalingGroup",
    },
    "AutoScalingGroupTestguec2appInstanceProfile69E61F9E": {
      "Properties": {
        "Roles": [
          {
            "Ref": "InstanceRoleTestguec2appC325BE42",
          },
        ],
      },
      "Type": "AWS::IAM::InstanceProfile",
    },
    "AutoScalingGroupTestguec2appLaunchConfigA7394577": {
      "DependsOn": [
        "InstanceRoleTestguec2appC325BE42",
      ],
      "Properties": {
        "IamInstanceProfile": {
          "Ref": "AutoScalingGroupTestguec2appInstanceProfile69E61F9E",
        },
        "ImageId": {
          "Ref": "AMITestguec2app",
        },
        "InstanceType": "t4g.medium",
        "MetadataOptions": {
          "HttpTokens": "required",
        },
        "SecurityGroups": [
          {
            "Fn::GetAtt": [
              "GuHttpsEgressSecurityGroupTestguec2appEBD7B195",
              "GroupId",
            ],
          },
          {
            "Fn::GetAtt": [
              "WazuhSecurityGroup",
              "GroupId",
            ],
          },
        ],
        "UserData": {
          "Fn::Base64": "#!/bin/dev foobarbaz",
        },
      },
      "Type": "AWS::AutoScaling::LaunchConfiguration",
    },
    "CertificateTestguec2app86EE2D42": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "DomainName": "code-guardian.com",
        "Tags": [
          {
            "Key": "App",
            "Value": "test-gu-ec2-app",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/cdk",
          },
          {
            "Key": "Name",
            "Value": "Test/CertificateTestguec2app",
          },
          {
            "Key": "Stack",
            "Value": "test-stack",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "ValidationMethod": "DNS",
      },
      "Type": "AWS::CertificateManager::Certificate",
      "UpdateReplacePolicy": "Retain",
    },
    "ChildAlarmLongPeriodMapiFrontsLatencyFastBurnCompositeAlarm422ED68C": {
      "Properties": {
        "AlarmName": "ChildAlarmLongPeriodMapiFrontsLatencyFastBurnCompositeAlarm",
        "ComparisonOperator": "GreaterThanThreshold",
        "EvaluationPeriods": 1,
        "Metrics": [
          {
            "Expression": "badEvents/validEvents",
            "Id": "expr_1",
            "Label": "Observed failure rate",
          },
          {
            "Id": "badEvents",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "LoadBalancer",
                    "Value": {
                      "Fn::GetAtt": [
                        "LoadBalancerTestguec2appC77A055C",
                        "LoadBalancerFullName",
                      ],
                    },
                  },
                ],
                "MetricName": "TargetResponseTime",
                "Namespace": "AWS/ApplicationELB",
              },
              "Period": 3600,
              "Stat": "TC(0.5:)",
            },
            "ReturnData": false,
          },
          {
            "Id": "validEvents",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "LoadBalancer",
                    "Value": {
                      "Fn::GetAtt": [
                        "LoadBalancerTestguec2appC77A055C",
                        "LoadBalancerFullName",
                      ],
                    },
                  },
                ],
                "MetricName": "RequestCount",
                "Namespace": "AWS/ApplicationELB",
              },
              "Period": 3600,
              "Stat": "Sum",
            },
            "ReturnData": false,
          },
        ],
        "Threshold": 0.014400000000000013,
        "TreatMissingData": "notBreaching",
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "ChildAlarmLongPeriodMapiFrontsLatencyMediumBurnCompositeAlarm3555F2B0": {
      "Properties": {
        "AlarmName": "ChildAlarmLongPeriodMapiFrontsLatencyMediumBurnCompositeAlarm",
        "ComparisonOperator": "GreaterThanThreshold",
        "EvaluationPeriods": 1,
        "Metrics": [
          {
            "Expression": "badEvents/validEvents",
            "Id": "expr_1",
            "Label": "Observed failure rate",
          },
          {
            "Id": "badEvents",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "LoadBalancer",
                    "Value": {
                      "Fn::GetAtt": [
                        "LoadBalancerTestguec2appC77A055C",
                        "LoadBalancerFullName",
                      ],
                    },
                  },
                ],
                "MetricName": "TargetResponseTime",
                "Namespace": "AWS/ApplicationELB",
              },
              "Period": 21600,
              "Stat": "TC(0.5:)",
            },
            "ReturnData": false,
          },
          {
            "Id": "validEvents",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "LoadBalancer",
                    "Value": {
                      "Fn::GetAtt": [
                        "LoadBalancerTestguec2appC77A055C",
                        "LoadBalancerFullName",
                      ],
                    },
                  },
                ],
                "MetricName": "RequestCount",
                "Namespace": "AWS/ApplicationELB",
              },
              "Period": 21600,
              "Stat": "Sum",
            },
            "ReturnData": false,
          },
        ],
        "Threshold": 0.006000000000000005,
        "TreatMissingData": "notBreaching",
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "ChildAlarmLongPeriodMapiFrontsLatencySlowBurnCompositeAlarmA8AD8E04": {
      "Properties": {
        "AlarmName": "ChildAlarmLongPeriodMapiFrontsLatencySlowBurnCompositeAlarm",
        "ComparisonOperator": "GreaterThanThreshold",
        "EvaluationPeriods": 1,
        "Metrics": [
          {
            "Expression": "badEvents/validEvents",
            "Id": "expr_1",
            "Label": "Observed failure rate",
          },
          {
            "Id": "badEvents",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "LoadBalancer",
                    "Value": {
                      "Fn::GetAtt": [
                        "LoadBalancerTestguec2appC77A055C",
                        "LoadBalancerFullName",
                      ],
                    },
                  },
                ],
                "MetricName": "TargetResponseTime",
                "Namespace": "AWS/ApplicationELB",
              },
              "Period": 86400,
              "Stat": "TC(0.5:)",
            },
            "ReturnData": false,
          },
          {
            "Id": "validEvents",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "LoadBalancer",
                    "Value": {
                      "Fn::GetAtt": [
                        "LoadBalancerTestguec2appC77A055C",
                        "LoadBalancerFullName",
                      ],
                    },
                  },
                ],
                "MetricName": "RequestCount",
                "Namespace": "AWS/ApplicationELB",
              },
              "Period": 86400,
              "Stat": "Sum",
            },
            "ReturnData": false,
          },
        ],
        "Threshold": 0.0030000000000000027,
        "TreatMissingData": "notBreaching",
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "ChildAlarmShortPeriodMapiFrontsLatencyFastBurnCompositeAlarm1CAE116A": {
      "Properties": {
        "AlarmName": "ChildAlarmShortPeriodMapiFrontsLatencyFastBurnCompositeAlarm",
        "ComparisonOperator": "GreaterThanThreshold",
        "EvaluationPeriods": 1,
        "Metrics": [
          {
            "Expression": "badEvents/validEvents",
            "Id": "expr_1",
            "Label": "Observed failure rate",
          },
          {
            "Id": "badEvents",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "LoadBalancer",
                    "Value": {
                      "Fn::GetAtt": [
                        "LoadBalancerTestguec2appC77A055C",
                        "LoadBalancerFullName",
                      ],
                    },
                  },
                ],
                "MetricName": "TargetResponseTime",
                "Namespace": "AWS/ApplicationELB",
              },
              "Period": 300,
              "Stat": "TC(0.5:)",
            },
            "ReturnData": false,
          },
          {
            "Id": "validEvents",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "LoadBalancer",
                    "Value": {
                      "Fn::GetAtt": [
                        "LoadBalancerTestguec2appC77A055C",
                        "LoadBalancerFullName",
                      ],
                    },
                  },
                ],
                "MetricName": "RequestCount",
                "Namespace": "AWS/ApplicationELB",
              },
              "Period": 300,
              "Stat": "Sum",
            },
            "ReturnData": false,
          },
        ],
        "Threshold": 0.014400000000000013,
        "TreatMissingData": "notBreaching",
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "ChildAlarmShortPeriodMapiFrontsLatencyMediumBurnCompositeAlarmDDB3B991": {
      "Properties": {
        "AlarmName": "ChildAlarmShortPeriodMapiFrontsLatencyMediumBurnCompositeAlarm",
        "ComparisonOperator": "GreaterThanThreshold",
        "EvaluationPeriods": 1,
        "Metrics": [
          {
            "Expression": "badEvents/validEvents",
            "Id": "expr_1",
            "Label": "Observed failure rate",
          },
          {
            "Id": "badEvents",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "LoadBalancer",
                    "Value": {
                      "Fn::GetAtt": [
                        "LoadBalancerTestguec2appC77A055C",
                        "LoadBalancerFullName",
                      ],
                    },
                  },
                ],
                "MetricName": "TargetResponseTime",
                "Namespace": "AWS/ApplicationELB",
              },
              "Period": 1800,
              "Stat": "TC(0.5:)",
            },
            "ReturnData": false,
          },
          {
            "Id": "validEvents",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "LoadBalancer",
                    "Value": {
                      "Fn::GetAtt": [
                        "LoadBalancerTestguec2appC77A055C",
                        "LoadBalancerFullName",
                      ],
                    },
                  },
                ],
                "MetricName": "RequestCount",
                "Namespace": "AWS/ApplicationELB",
              },
              "Period": 1800,
              "Stat": "Sum",
            },
            "ReturnData": false,
          },
        ],
        "Threshold": 0.006000000000000005,
        "TreatMissingData": "notBreaching",
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "ChildAlarmShortPeriodMapiFrontsLatencySlowBurnCompositeAlarm09CA410D": {
      "Properties": {
        "AlarmName": "ChildAlarmShortPeriodMapiFrontsLatencySlowBurnCompositeAlarm",
        "ComparisonOperator": "GreaterThanThreshold",
        "EvaluationPeriods": 1,
        "Metrics": [
          {
            "Expression": "badEvents/validEvents",
            "Id": "expr_1",
            "Label": "Observed failure rate",
          },
          {
            "Id": "badEvents",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "LoadBalancer",
                    "Value": {
                      "Fn::GetAtt": [
                        "LoadBalancerTestguec2appC77A055C",
                        "LoadBalancerFullName",
                      ],
                    },
                  },
                ],
                "MetricName": "TargetResponseTime",
                "Namespace": "AWS/ApplicationELB",
              },
              "Period": 7200,
              "Stat": "TC(0.5:)",
            },
            "ReturnData": false,
          },
          {
            "Id": "validEvents",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "LoadBalancer",
                    "Value": {
                      "Fn::GetAtt": [
                        "LoadBalancerTestguec2appC77A055C",
                        "LoadBalancerFullName",
                      ],
                    },
                  },
                ],
                "MetricName": "RequestCount",
                "Namespace": "AWS/ApplicationELB",
              },
              "Period": 7200,
              "Stat": "Sum",
            },
            "ReturnData": false,
          },
        ],
        "Threshold": 0.0030000000000000027,
        "TreatMissingData": "notBreaching",
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "DescribeEC2PolicyFF5F9295": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "autoscaling:DescribeAutoScalingInstances",
                "autoscaling:DescribeAutoScalingGroups",
                "ec2:DescribeTags",
                "ec2:DescribeInstances",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "describe-ec2-policy",
        "Roles": [
          {
            "Ref": "InstanceRoleTestguec2appC325BE42",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "GetDistributablePolicyTestguec2app6A8D1854": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:GetObject",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "DistributionBucketName",
                    },
                    "/test-stack/TEST/test-gu-ec2-app/*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "GetDistributablePolicyTestguec2app6A8D1854",
        "Roles": [
          {
            "Ref": "InstanceRoleTestguec2appC325BE42",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "GuHttpsEgressSecurityGroupTestguec2appEBD7B195": {
      "Properties": {
        "GroupDescription": "Allow all outbound HTTPS traffic",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound HTTPS traffic",
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443,
          },
        ],
        "Tags": [
          {
            "Key": "App",
            "Value": "test-gu-ec2-app",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/cdk",
          },
          {
            "Key": "Stack",
            "Value": "test-stack",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "VpcId": {
          "Ref": "VpcId",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "GuHttpsEgressSecurityGroupTestguec2appfromTestLoadBalancerTestguec2appSecurityGroup5F9E11C9300051FB63C7": {
      "Properties": {
        "Description": "Load balancer to target",
        "FromPort": 3000,
        "GroupId": {
          "Fn::GetAtt": [
            "GuHttpsEgressSecurityGroupTestguec2appEBD7B195",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "LoadBalancerTestguec2appSecurityGroupCC6F85C1",
            "GroupId",
          ],
        },
        "ToPort": 3000,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "GuLogShippingPolicy981BFE5A": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kinesis:Describe*",
                "kinesis:Put*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:kinesis:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":stream/",
                    {
                      "Ref": "LoggingStreamName",
                    },
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "GuLogShippingPolicy981BFE5A",
        "Roles": [
          {
            "Ref": "InstanceRoleTestguec2appC325BE42",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "InstanceRoleTestguec2appC325BE42": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": {
                  "Fn::Join": [
                    "",
                    [
                      "ec2.",
                      {
                        "Ref": "AWS::URLSuffix",
                      },
                    ],
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Path": "/",
        "Tags": [
          {
            "Key": "App",
            "Value": "test-gu-ec2-app",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/cdk",
          },
          {
            "Key": "Stack",
            "Value": "test-stack",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ListenerTestguec2app4FBB034F": {
      "Properties": {
        "Certificates": [
          {
            "CertificateArn": {
              "Ref": "CertificateTestguec2app86EE2D42",
            },
          },
        ],
        "DefaultActions": [
          {
            "TargetGroupArn": {
              "Ref": "TargetGroupTestguec2app9F67D503",
            },
            "Type": "forward",
          },
        ],
        "LoadBalancerArn": {
          "Ref": "LoadBalancerTestguec2appC77A055C",
        },
        "Port": 443,
        "Protocol": "HTTPS",
      },
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
    },
    "LoadBalancerTestguec2appC77A055C": {
      "Properties": {
        "LoadBalancerAttributes": [
          {
            "Key": "deletion_protection.enabled",
            "Value": "true",
          },
        ],
        "Scheme": "internet-facing",
        "SecurityGroups": [
          {
            "Fn::GetAtt": [
              "LoadBalancerTestguec2appSecurityGroupCC6F85C1",
              "GroupId",
            ],
          },
        ],
        "Subnets": {
          "Ref": "testguec2appPublicSubnets",
        },
        "Tags": [
          {
            "Key": "App",
            "Value": "test-gu-ec2-app",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/cdk",
          },
          {
            "Key": "Stack",
            "Value": "test-stack",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "Type": "application",
      },
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
    },
    "LoadBalancerTestguec2appSecurityGroupCC6F85C1": {
      "Properties": {
        "GroupDescription": "Automatically created Security Group for ELB TestLoadBalancerTestguec2app8CD12AE9",
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow from anyone on port 443",
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443,
          },
        ],
        "Tags": [
          {
            "Key": "App",
            "Value": "test-gu-ec2-app",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/cdk",
          },
          {
            "Key": "Stack",
            "Value": "test-stack",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "VpcId": {
          "Ref": "VpcId",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "LoadBalancerTestguec2appSecurityGrouptoTestGuHttpsEgressSecurityGroupTestguec2appE5EE51F53000FE644240": {
      "Properties": {
        "Description": "Load balancer to target",
        "DestinationSecurityGroupId": {
          "Fn::GetAtt": [
            "GuHttpsEgressSecurityGroupTestguec2appEBD7B195",
            "GroupId",
          ],
        },
        "FromPort": 3000,
        "GroupId": {
          "Fn::GetAtt": [
            "LoadBalancerTestguec2appSecurityGroupCC6F85C1",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "ToPort": 3000,
      },
      "Type": "AWS::EC2::SecurityGroupEgress",
    },
    "MapiFrontsLatencyFastBurnCompositeAlarmEBFA1AC4": {
      "Properties": {
        "AlarmActions": [
          {
            "Fn::Join": [
              "",
              [
                "arn:aws:sns:",
                {
                  "Ref": "AWS::Region",
                },
                ":",
                {
                  "Ref": "AWS::AccountId",
                },
                ":test-sns-topic",
              ],
            ],
          },
        ],
        "AlarmName": "TestMapiFrontsLatencyFastBurnCompositeAlarm0257B5C2",
        "AlarmRule": {
          "Fn::Join": [
            "",
            [
              "(ALARM("",
              {
                "Fn::GetAtt": [
                  "ChildAlarmLongPeriodMapiFrontsLatencyFastBurnCompositeAlarm422ED68C",
                  "Arn",
                ],
              },
              "") AND ALARM("",
              {
                "Fn::GetAtt": [
                  "ChildAlarmShortPeriodMapiFrontsLatencyFastBurnCompositeAlarm1CAE116A",
                  "Arn",
                ],
              },
              ""))",
            ],
          ],
        },
      },
      "Type": "AWS::CloudWatch::CompositeAlarm",
    },
    "MapiFrontsLatencyMediumBurnCompositeAlarm2D78C6A9": {
      "Properties": {
        "ActionsSuppressor": {
          "Fn::GetAtt": [
            "MapiFrontsLatencyFastBurnCompositeAlarmEBFA1AC4",
            "Arn",
          ],
        },
        "ActionsSuppressorExtensionPeriod": 1800,
        "ActionsSuppressorWaitPeriod": 120,
        "AlarmActions": [
          {
            "Fn::Join": [
              "",
              [
                "arn:aws:sns:",
                {
                  "Ref": "AWS::Region",
                },
                ":",
                {
                  "Ref": "AWS::AccountId",
                },
                ":test-sns-topic",
              ],
            ],
          },
        ],
        "AlarmName": "TestMapiFrontsLatencyMediumBurnCompositeAlarm745E32A3",
        "AlarmRule": {
          "Fn::Join": [
            "",
            [
              "(ALARM("",
              {
                "Fn::GetAtt": [
                  "ChildAlarmLongPeriodMapiFrontsLatencyMediumBurnCompositeAlarm3555F2B0",
                  "Arn",
                ],
              },
              "") AND ALARM("",
              {
                "Fn::GetAtt": [
                  "ChildAlarmShortPeriodMapiFrontsLatencyMediumBurnCompositeAlarmDDB3B991",
                  "Arn",
                ],
              },
              ""))",
            ],
          ],
        },
      },
      "Type": "AWS::CloudWatch::CompositeAlarm",
    },
    "MapiFrontsLatencySlowBurnCompositeAlarmBA8C4056": {
      "Properties": {
        "ActionsSuppressor": {
          "Fn::GetAtt": [
            "MapiFrontsLatencyMediumBurnCompositeAlarm2D78C6A9",
            "Arn",
          ],
        },
        "ActionsSuppressorExtensionPeriod": 7200,
        "ActionsSuppressorWaitPeriod": 120,
        "AlarmActions": [
          {
            "Fn::Join": [
              "",
              [
                "arn:aws:sns:",
                {
                  "Ref": "AWS::Region",
                },
                ":",
                {
                  "Ref": "AWS::AccountId",
                },
                ":test-sns-topic",
              ],
            ],
          },
        ],
        "AlarmName": "TestMapiFrontsLatencySlowBurnCompositeAlarmEC55D67B",
        "AlarmRule": {
          "Fn::Join": [
            "",
            [
              "(ALARM("",
              {
                "Fn::GetAtt": [
                  "ChildAlarmLongPeriodMapiFrontsLatencySlowBurnCompositeAlarmA8AD8E04",
                  "Arn",
                ],
              },
              "") AND ALARM("",
              {
                "Fn::GetAtt": [
                  "ChildAlarmShortPeriodMapiFrontsLatencySlowBurnCompositeAlarm09CA410D",
                  "Arn",
                ],
              },
              ""))",
            ],
          ],
        },
      },
      "Type": "AWS::CloudWatch::CompositeAlarm",
    },
    "ParameterStoreReadTestguec2app072DCDE1": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ssm:GetParametersByPath",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:ssm:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/TEST/test-stack/test-gu-ec2-app",
                  ],
                ],
              },
            },
            {
              "Action": [
                "ssm:GetParameters",
                "ssm:GetParameter",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:ssm:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/TEST/test-stack/test-gu-ec2-app/*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "parameter-store-read-policy",
        "Roles": [
          {
            "Ref": "InstanceRoleTestguec2appC325BE42",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SSMRunCommandPolicy244E1613": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ec2messages:AcknowledgeMessage",
                "ec2messages:DeleteMessage",
                "ec2messages:FailMessage",
                "ec2messages:GetEndpoint",
                "ec2messages:GetMessages",
                "ec2messages:SendReply",
                "ssm:UpdateInstanceInformation",
                "ssm:ListInstanceAssociations",
                "ssm:DescribeInstanceProperties",
                "ssm:DescribeDocumentParameters",
                "ssmmessages:CreateControlChannel",
                "ssmmessages:CreateDataChannel",
                "ssmmessages:OpenControlChannel",
                "ssmmessages:OpenDataChannel",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ssm-run-command-policy",
        "Roles": [
          {
            "Ref": "InstanceRoleTestguec2appC325BE42",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "TargetGroupTestguec2app9F67D503": {
      "Properties": {
        "HealthCheckIntervalSeconds": 10,
        "HealthCheckPath": "/healthcheck",
        "HealthCheckProtocol": "HTTP",
        "HealthCheckTimeoutSeconds": 5,
        "HealthyThresholdCount": 5,
        "Port": 3000,
        "Protocol": "HTTP",
        "Tags": [
          {
            "Key": "App",
            "Value": "test-gu-ec2-app",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/cdk",
          },
          {
            "Key": "Stack",
            "Value": "test-stack",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "TargetGroupAttributes": [
          {
            "Key": "deregistration_delay.timeout_seconds",
            "Value": "30",
          },
          {
            "Key": "stickiness.enabled",
            "Value": "false",
          },
        ],
        "TargetType": "instance",
        "UnhealthyThresholdCount": 2,
        "VpcId": {
          "Ref": "VpcId",
        },
      },
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
    },
    "WazuhSecurityGroup": {
      "Properties": {
        "GroupDescription": "Allow outbound traffic from wazuh agent to manager",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Wazuh event logging",
            "FromPort": 1514,
            "IpProtocol": "tcp",
            "ToPort": 1514,
          },
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Wazuh agent registration",
            "FromPort": 1515,
            "IpProtocol": "tcp",
            "ToPort": 1515,
          },
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/cdk",
          },
          {
            "Key": "Stack",
            "Value": "test-stack",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "VpcId": {
          "Ref": "VpcId",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
  },
}
`;

exports[`The ErrorBudgetAlarmExperimental construct should create the correct resources with basic config 1`] = `
{
  "Metadata": {
    "gu:cdk:constructs": [
      "GuStack",
      "GuErrorBudgetAlarmExperimental",
    ],
    "gu:cdk:version": "TEST",
  },
  "Resources": {
    "ChildAlarmLongPeriodMapiFrontsAvailabilityFastBurnCompositeAlarmF1A44641": {
      "Properties": {
        "AlarmName": "ChildAlarmLongPeriodMapiFrontsAvailabilityFastBurnCompositeAlarm",
        "ComparisonOperator": "GreaterThanThreshold",
        "EvaluationPeriods": 1,
        "Metrics": [
          {
            "Expression": "badEvents/validEvents",
            "Id": "expr_1",
            "Label": "Observed failure rate",
          },
          {
            "Id": "badEvents",
            "MetricStat": {
              "Metric": {
                "MetricName": "HttpErrors",
                "Namespace": "TestLoadBalancerMetrics",
              },
              "Period": 3600,
              "Stat": "Average",
            },
            "ReturnData": false,
          },
          {
            "Id": "validEvents",
            "MetricStat": {
              "Metric": {
                "MetricName": "HttpRequests",
                "Namespace": "TestLoadBalancerMetrics",
              },
              "Period": 3600,
              "Stat": "Average",
            },
            "ReturnData": false,
          },
        ],
        "Threshold": 0.014400000000000013,
        "TreatMissingData": "notBreaching",
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "ChildAlarmLongPeriodMapiFrontsAvailabilityMediumBurnCompositeAlarmB28EFC34": {
      "Properties": {
        "AlarmName": "ChildAlarmLongPeriodMapiFrontsAvailabilityMediumBurnCompositeAlarm",
        "ComparisonOperator": "GreaterThanThreshold",
        "EvaluationPeriods": 1,
        "Metrics": [
          {
            "Expression": "badEvents/validEvents",
            "Id": "expr_1",
            "Label": "Observed failure rate",
          },
          {
            "Id": "badEvents",
            "MetricStat": {
              "Metric": {
                "MetricName": "HttpErrors",
                "Namespace": "TestLoadBalancerMetrics",
              },
              "Period": 21600,
              "Stat": "Average",
            },
            "ReturnData": false,
          },
          {
            "Id": "validEvents",
            "MetricStat": {
              "Metric": {
                "MetricName": "HttpRequests",
                "Namespace": "TestLoadBalancerMetrics",
              },
              "Period": 21600,
              "Stat": "Average",
            },
            "ReturnData": false,
          },
        ],
        "Threshold": 0.006000000000000005,
        "TreatMissingData": "notBreaching",
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "ChildAlarmLongPeriodMapiFrontsAvailabilitySlowBurnCompositeAlarm31625779": {
      "Properties": {
        "AlarmName": "ChildAlarmLongPeriodMapiFrontsAvailabilitySlowBurnCompositeAlarm",
        "ComparisonOperator": "GreaterThanThreshold",
        "EvaluationPeriods": 1,
        "Metrics": [
          {
            "Expression": "badEvents/validEvents",
            "Id": "expr_1",
            "Label": "Observed failure rate",
          },
          {
            "Id": "badEvents",
            "MetricStat": {
              "Metric": {
                "MetricName": "HttpErrors",
                "Namespace": "TestLoadBalancerMetrics",
              },
              "Period": 86400,
              "Stat": "Average",
            },
            "ReturnData": false,
          },
          {
            "Id": "validEvents",
            "MetricStat": {
              "Metric": {
                "MetricName": "HttpRequests",
                "Namespace": "TestLoadBalancerMetrics",
              },
              "Period": 86400,
              "Stat": "Average",
            },
            "ReturnData": false,
          },
        ],
        "Threshold": 0.0030000000000000027,
        "TreatMissingData": "notBreaching",
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "ChildAlarmShortPeriodMapiFrontsAvailabilityFastBurnCompositeAlarmCF3AFF0A": {
      "Properties": {
        "AlarmName": "ChildAlarmShortPeriodMapiFrontsAvailabilityFastBurnCompositeAlarm",
        "ComparisonOperator": "GreaterThanThreshold",
        "EvaluationPeriods": 1,
        "Metrics": [
          {
            "Expression": "badEvents/validEvents",
            "Id": "expr_1",
            "Label": "Observed failure rate",
          },
          {
            "Id": "badEvents",
            "MetricStat": {
              "Metric": {
                "MetricName": "HttpErrors",
                "Namespace": "TestLoadBalancerMetrics",
              },
              "Period": 300,
              "Stat": "Average",
            },
            "ReturnData": false,
          },
          {
            "Id": "validEvents",
            "MetricStat": {
              "Metric": {
                "MetricName": "HttpRequests",
                "Namespace": "TestLoadBalancerMetrics",
              },
              "Period": 300,
              "Stat": "Average",
            },
            "ReturnData": false,
          },
        ],
        "Threshold": 0.014400000000000013,
        "TreatMissingData": "notBreaching",
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "ChildAlarmShortPeriodMapiFrontsAvailabilityMediumBurnCompositeAlarmDBEC21EA": {
      "Properties": {
        "AlarmName": "ChildAlarmShortPeriodMapiFrontsAvailabilityMediumBurnCompositeAlarm",
        "ComparisonOperator": "GreaterThanThreshold",
        "EvaluationPeriods": 1,
        "Metrics": [
          {
            "Expression": "badEvents/validEvents",
            "Id": "expr_1",
            "Label": "Observed failure rate",
          },
          {
            "Id": "badEvents",
            "MetricStat": {
              "Metric": {
                "MetricName": "HttpErrors",
                "Namespace": "TestLoadBalancerMetrics",
              },
              "Period": 1800,
              "Stat": "Average",
            },
            "ReturnData": false,
          },
          {
            "Id": "validEvents",
            "MetricStat": {
              "Metric": {
                "MetricName": "HttpRequests",
                "Namespace": "TestLoadBalancerMetrics",
              },
              "Period": 1800,
              "Stat": "Average",
            },
            "ReturnData": false,
          },
        ],
        "Threshold": 0.006000000000000005,
        "TreatMissingData": "notBreaching",
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "ChildAlarmShortPeriodMapiFrontsAvailabilitySlowBurnCompositeAlarmCA6C81C2": {
      "Properties": {
        "AlarmName": "ChildAlarmShortPeriodMapiFrontsAvailabilitySlowBurnCompositeAlarm",
        "ComparisonOperator": "GreaterThanThreshold",
        "EvaluationPeriods": 1,
        "Metrics": [
          {
            "Expression": "badEvents/validEvents",
            "Id": "expr_1",
            "Label": "Observed failure rate",
          },
          {
            "Id": "badEvents",
            "MetricStat": {
              "Metric": {
                "MetricName": "HttpErrors",
                "Namespace": "TestLoadBalancerMetrics",
              },
              "Period": 7200,
              "Stat": "Average",
            },
            "ReturnData": false,
          },
          {
            "Id": "validEvents",
            "MetricStat": {
              "Metric": {
                "MetricName": "HttpRequests",
                "Namespace": "TestLoadBalancerMetrics",
              },
              "Period": 7200,
              "Stat": "Average",
            },
            "ReturnData": false,
          },
        ],
        "Threshold": 0.0030000000000000027,
        "TreatMissingData": "notBreaching",
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "MapiFrontsAvailabilityFastBurnCompositeAlarmA8F736A8": {
      "Properties": {
        "AlarmActions": [
          {
            "Fn::Join": [
              "",
              [
                "arn:aws:sns:",
                {
                  "Ref": "AWS::Region",
                },
                ":",
                {
                  "Ref": "AWS::AccountId",
                },
                ":test-sns-topic",
              ],
            ],
          },
        ],
        "AlarmName": "TestMapiFrontsAvailabilityFastBurnCompositeAlarmF4979734",
        "AlarmRule": {
          "Fn::Join": [
            "",
            [
              "(ALARM("",
              {
                "Fn::GetAtt": [
                  "ChildAlarmLongPeriodMapiFrontsAvailabilityFastBurnCompositeAlarmF1A44641",
                  "Arn",
                ],
              },
              "") AND ALARM("",
              {
                "Fn::GetAtt": [
                  "ChildAlarmShortPeriodMapiFrontsAvailabilityFastBurnCompositeAlarmCF3AFF0A",
                  "Arn",
                ],
              },
              ""))",
            ],
          ],
        },
      },
      "Type": "AWS::CloudWatch::CompositeAlarm",
    },
    "MapiFrontsAvailabilityMediumBurnCompositeAlarmEC8DC379": {
      "Properties": {
        "ActionsSuppressor": {
          "Fn::GetAtt": [
            "MapiFrontsAvailabilityFastBurnCompositeAlarmA8F736A8",
            "Arn",
          ],
        },
        "ActionsSuppressorExtensionPeriod": 1800,
        "ActionsSuppressorWaitPeriod": 120,
        "AlarmActions": [
          {
            "Fn::Join": [
              "",
              [
                "arn:aws:sns:",
                {
                  "Ref": "AWS::Region",
                },
                ":",
                {
                  "Ref": "AWS::AccountId",
                },
                ":test-sns-topic",
              ],
            ],
          },
        ],
        "AlarmName": "TestMapiFrontsAvailabilityMediumBurnCompositeAlarm7022D40E",
        "AlarmRule": {
          "Fn::Join": [
            "",
            [
              "(ALARM("",
              {
                "Fn::GetAtt": [
                  "ChildAlarmLongPeriodMapiFrontsAvailabilityMediumBurnCompositeAlarmB28EFC34",
                  "Arn",
                ],
              },
              "") AND ALARM("",
              {
                "Fn::GetAtt": [
                  "ChildAlarmShortPeriodMapiFrontsAvailabilityMediumBurnCompositeAlarmDBEC21EA",
                  "Arn",
                ],
              },
              ""))",
            ],
          ],
        },
      },
      "Type": "AWS::CloudWatch::CompositeAlarm",
    },
    "MapiFrontsAvailabilitySlowBurnCompositeAlarm1198F7B4": {
      "Properties": {
        "ActionsSuppressor": {
          "Fn::GetAtt": [
            "MapiFrontsAvailabilityMediumBurnCompositeAlarmEC8DC379",
            "Arn",
          ],
        },
        "ActionsSuppressorExtensionPeriod": 7200,
        "ActionsSuppressorWaitPeriod": 120,
        "AlarmActions": [
          {
            "Fn::Join": [
              "",
              [
                "arn:aws:sns:",
                {
                  "Ref": "AWS::Region",
                },
                ":",
                {
                  "Ref": "AWS::AccountId",
                },
                ":test-sns-topic",
              ],
            ],
          },
        ],
        "AlarmName": "TestMapiFrontsAvailabilitySlowBurnCompositeAlarm5EDECA5E",
        "AlarmRule": {
          "Fn::Join": [
            "",
            [
              "(ALARM("",
              {
                "Fn::GetAtt": [
                  "ChildAlarmLongPeriodMapiFrontsAvailabilitySlowBurnCompositeAlarm31625779",
                  "Arn",
                ],
              },
              "") AND ALARM("",
              {
                "Fn::GetAtt": [
                  "ChildAlarmShortPeriodMapiFrontsAvailabilitySlowBurnCompositeAlarmCA6C81C2",
                  "Arn",
                ],
              },
              ""))",
            ],
          ],
        },
      },
      "Type": "AWS::CloudWatch::CompositeAlarm",
    },
  },
}
`;
